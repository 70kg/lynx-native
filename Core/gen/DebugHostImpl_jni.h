
// This file is autogenerated by
//     /Users/dli/Documents/lynx/lynx-native/lynx/build/jni_generator.py
// For
//     com/lynx/dev/DebugHostImpl

#ifndef com_lynx_dev_DebugHostImpl_JNI
#define com_lynx_dev_DebugHostImpl_JNI

#include <jni.h>

#include "base/android/android_jni.h"

// Step 1: forward declarations.
namespace {
const char kDebugHostImplClassPath[] = "com/lynx/dev/DebugHostImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_DebugHostImpl_clazz = NULL;
#define DebugHostImpl_clazz(env) g_DebugHostImpl_clazz

}  // namespace

static void Attach(JNIEnv* env, jobject jcaller);

// Step 2: method stubs.

static intptr_t g_DebugHostImpl_runDebug = 0;
static void Java_DebugHostImpl_runDebug(JNIEnv* env, jobject obj, int type) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    DebugHostImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, DebugHostImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "runDebug",

"("
"I"
")"
"V",
      &g_DebugHostImpl_runDebug);

     env->CallVoidMethod(obj,
          method_id, int(type));
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsDebugHostImpl[] = {
    { "nativeAttach",
"("
")"
"V", reinterpret_cast<void*>(Attach) },
};

static bool RegisterNativesImpl(JNIEnv* env) {

  g_DebugHostImpl_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kDebugHostImplClassPath).Get()));

  const int kMethodsDebugHostImplSize =
      sizeof(kMethodsDebugHostImpl)/sizeof(kMethodsDebugHostImpl[0]);

  if (env->RegisterNatives(DebugHostImpl_clazz(env),
                           kMethodsDebugHostImpl,
                           kMethodsDebugHostImplSize) < 0) {
    //jni_generator::HandleRegistrationError(
    //    env, DebugHostImpl_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // com_lynx_dev_DebugHostImpl_JNI
