
// This file is autogenerated by
//     /Users/dli/Documents/lynx/lynx-native/lynx/build/jni_generator.py
// For
//     com/lynx/core/impl/RenderObjectImpl

#ifndef com_lynx_core_impl_RenderObjectImpl_JNI
#define com_lynx_core_impl_RenderObjectImpl_JNI

#include <jni.h>

#include "base/android/android_jni.h"

// Step 1: forward declarations.
namespace {
const char kRenderObjectImplClassPath[] = "com/lynx/core/impl/RenderObjectImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_RenderObjectImpl_clazz = NULL;
#define RenderObjectImpl_clazz(env) g_RenderObjectImpl_clazz

}  // namespace

static void DispatchEvent(JNIEnv* env, jobject jcaller,
    jlong nativePtr,
    jstring event,
    jobjectArray params);

static void UpdateData(JNIEnv* env, jobject jcaller,
    jlong nativePtr,
    jint attr,
    jobject param);

static void FreeJavaRef(JNIEnv* env, jobject jcaller,
    jlong nativePtr);

static void ConstructJavaRef(JNIEnv* env, jobject jcaller,
    jlong mNativePtr,
    jobject object);

// Step 2: method stubs.

static intptr_t g_RenderObjectImpl_insertChild = 0;
static void Java_RenderObjectImpl_insertChild(JNIEnv* env, jobject obj, jobject
    child,
    int index) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    RenderObjectImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "insertChild",

"("
"Lcom/lynx/core/impl/RenderObjectImpl;"
"I"
")"
"V",
      &g_RenderObjectImpl_insertChild);

     env->CallVoidMethod(obj,
          method_id, child, int(index));
  base::android::CheckException(env);

}

static intptr_t g_RenderObjectImpl_removeChild = 0;
static void Java_RenderObjectImpl_removeChild(JNIEnv* env, jobject obj, jobject
    child) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    RenderObjectImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "removeChild",

"("
"Lcom/lynx/core/impl/RenderObjectImpl;"
")"
"V",
      &g_RenderObjectImpl_removeChild);

     env->CallVoidMethod(obj,
          method_id, child);
  base::android::CheckException(env);

}

static intptr_t g_RenderObjectImpl_requestLayout = 0;
static void Java_RenderObjectImpl_requestLayout(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    RenderObjectImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "requestLayout",

"("
")"
"V",
      &g_RenderObjectImpl_requestLayout);

     env->CallVoidMethod(obj,
          method_id);
  base::android::CheckException(env);

}

static intptr_t g_RenderObjectImpl_setText = 0;
static void Java_RenderObjectImpl_setText(JNIEnv* env, jobject obj, jstring
    text) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    RenderObjectImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "setText",

"("
"Ljava/lang/String;"
")"
"V",
      &g_RenderObjectImpl_setText);

     env->CallVoidMethod(obj,
          method_id, text);
  base::android::CheckException(env);

}

static intptr_t g_RenderObjectImpl_setPosition = 0;
static void Java_RenderObjectImpl_setPosition(JNIEnv* env, jobject obj, jobject
    position) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    RenderObjectImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "setPosition",

"("
"Lcom/lynx/base/Position;"
")"
"V",
      &g_RenderObjectImpl_setPosition);

     env->CallVoidMethod(obj,
          method_id, position);
  base::android::CheckException(env);

}

static intptr_t g_RenderObjectImpl_setSize = 0;
static void Java_RenderObjectImpl_setSize(JNIEnv* env, jobject obj, jobject
    size) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    RenderObjectImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "setSize",

"("
"Lcom/lynx/base/Size;"
")"
"V",
      &g_RenderObjectImpl_setSize);

     env->CallVoidMethod(obj,
          method_id, size);
  base::android::CheckException(env);

}

static intptr_t g_RenderObjectImpl_updateStyle = 0;
static void Java_RenderObjectImpl_updateStyle(JNIEnv* env, jobject obj, jobject
    style) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    RenderObjectImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "updateStyle",

"("
"Lcom/lynx/base/Style;"
")"
"V",
      &g_RenderObjectImpl_updateStyle);

     env->CallVoidMethod(obj,
          method_id, style);
  base::android::CheckException(env);

}

static intptr_t g_RenderObjectImpl_setAttribute = 0;
static void Java_RenderObjectImpl_setAttribute(JNIEnv* env, jobject obj, jstring
    key,
    jstring value) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    RenderObjectImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "setAttribute",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_RenderObjectImpl_setAttribute);

     env->CallVoidMethod(obj,
          method_id, key, value);
  base::android::CheckException(env);

}

static intptr_t g_RenderObjectImpl_addEventListener = 0;
static void Java_RenderObjectImpl_addEventListener(JNIEnv* env, jobject obj,
    jstring event) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    RenderObjectImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "addEventListener",

"("
"Ljava/lang/String;"
")"
"V",
      &g_RenderObjectImpl_addEventListener);

     env->CallVoidMethod(obj,
          method_id, event);
  base::android::CheckException(env);

}

static intptr_t g_RenderObjectImpl_removeEventListener = 0;
static void Java_RenderObjectImpl_removeEventListener(JNIEnv* env, jobject obj,
    jstring event) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    RenderObjectImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "removeEventListener",

"("
"Ljava/lang/String;"
")"
"V",
      &g_RenderObjectImpl_removeEventListener);

     env->CallVoidMethod(obj,
          method_id, event);
  base::android::CheckException(env);

}

static intptr_t g_RenderObjectImpl_setData = 0;
static void Java_RenderObjectImpl_setData(JNIEnv* env, jobject obj, int key,
    jobject data) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    RenderObjectImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "setData",

"("
"I"
"Ljava/lang/Object;"
")"
"V",
      &g_RenderObjectImpl_setData);

     env->CallVoidMethod(obj,
          method_id, int(key), data);
  base::android::CheckException(env);

}

static intptr_t g_RenderObjectImpl_animate = 0;
static void Java_RenderObjectImpl_animate(JNIEnv* env, jobject obj, jobject
    keyframes,
    jobject options) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    RenderObjectImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "animate",

"("
"Lcom/lynx/core/base/LynxArray;"
"Lcom/lynx/core/base/LynxObject;"
")"
"V",
      &g_RenderObjectImpl_animate);

     env->CallVoidMethod(obj,
          method_id, keyframes, options);
  base::android::CheckException(env);

}

static intptr_t g_RenderObjectImpl_cancelAnimation = 0;
static void Java_RenderObjectImpl_cancelAnimation(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    RenderObjectImpl_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::INSTANCE_METHOD,
      "cancelAnimation",

"("
")"
"V",
      &g_RenderObjectImpl_cancelAnimation);

     env->CallVoidMethod(obj,
          method_id);
  base::android::CheckException(env);

}

static intptr_t g_RenderObjectImpl_create = 0;
static base::android::ScopedLocalJavaRef<jobject>
    Java_RenderObjectImpl_create(JNIEnv* env, int type,
    jlong ptr) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, RenderObjectImpl_clazz(env),
  //    RenderObjectImpl_clazz(env), NULL);
  jmethodID method_id =
      base::android::GetMethod(
      env, RenderObjectImpl_clazz(env),
      base::android::STATIC_METHOD,
      "create",

"("
"I"
"J"
")"
"Lcom/lynx/core/impl/RenderObjectImpl;",
      &g_RenderObjectImpl_create);

  jobject ret =
      env->CallStaticObjectMethod(RenderObjectImpl_clazz(env),
          method_id, int(type), ptr);
  base::android::CheckException(env);
  return base::android::ScopedLocalJavaRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsRenderObjectImpl[] = {
    { "nativeDispatchEvent",
"("
"J"
"Ljava/lang/String;"
"[Ljava/lang/Object;"
")"
"V", reinterpret_cast<void*>(DispatchEvent) },
    { "nativeUpdateData",
"("
"J"
"I"
"Ljava/lang/Object;"
")"
"V", reinterpret_cast<void*>(UpdateData) },
    { "nativeFreeJavaRef",
"("
"J"
")"
"V", reinterpret_cast<void*>(FreeJavaRef) },
    { "nativeConstructJavaRef",
"("
"J"
"Ljava/lang/Object;"
")"
"V", reinterpret_cast<void*>(ConstructJavaRef) },
};

static bool RegisterNativesImpl(JNIEnv* env) {

  g_RenderObjectImpl_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kRenderObjectImplClassPath).Get()));

  const int kMethodsRenderObjectImplSize =
      sizeof(kMethodsRenderObjectImpl)/sizeof(kMethodsRenderObjectImpl[0]);

  if (env->RegisterNatives(RenderObjectImpl_clazz(env),
                           kMethodsRenderObjectImpl,
                           kMethodsRenderObjectImplSize) < 0) {
    //jni_generator::HandleRegistrationError(
    //    env, RenderObjectImpl_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // com_lynx_core_impl_RenderObjectImpl_JNI
