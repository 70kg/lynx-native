
// This file is autogenerated by
//     /Users/dli/Documents/lynx/lynx-native/lynx/build/jni_generator.py
// For
//     com/lynx/core/LynxRuntime

#ifndef com_lynx_core_LynxRuntime_JNI
#define com_lynx_core_LynxRuntime_JNI

#include <jni.h>

#include "base/android/android_jni.h"

// Step 1: forward declarations.
namespace {
const char kLynxRuntimeClassPath[] = "com/lynx/core/LynxRuntime";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_LynxRuntime_clazz = NULL;
#define LynxRuntime_clazz(env) g_LynxRuntime_clazz

}  // namespace

static jboolean CheckMemoryEnabled(JNIEnv* env, jclass jcaller);

static void CheckMemoryLeak(JNIEnv* env, jclass jcaller);

static void InitGlobalConfig(JNIEnv* env, jclass jcaller,
    jint screenWidthPx,
    jint screenHeightPx,
    jdouble density,
    jint zoomRatioPx,
    jstring deviceInfo);

static jint CreateNativeJSRuntime(JNIEnv* env, jobject jcaller);

static void DestroyNativeJSRuntime(JNIEnv* env, jobject jcaller,
    jlong runtime);

static void RunScript(JNIEnv* env, jobject jcaller,
    jlong runtime,
    jstring source,
    jobject callback);

static void LoadHTML(JNIEnv* env, jobject jcaller,
    jlong runtime,
    jstring url,
    jstring source);

static void LoadScriptDataWithBaseUrl(JNIEnv* env, jobject jcaller,
    jlong runtime,
    jstring source,
    jstring url);

static void LoadUrl(JNIEnv* env, jobject jcaller,
    jlong runtime,
    jstring url);

static jobject InitRuntime(JNIEnv* env, jobject jcaller,
    jlong runtime);

static jstring GetPageURL(JNIEnv* env, jobject jcaller,
    jlong runtime);

static jstring GetUserAgent(JNIEnv* env, jobject jcaller,
    jlong runtime);

static void SetUserAgent(JNIEnv* env, jobject jcaller,
    jlong runtime,
    jstring ua);

static void AddJavascriptInterface(JNIEnv* env, jobject jcaller,
    jlong runtime,
    jobject object,
    jstring name);

static void SetExceptionListner(JNIEnv* env, jobject jcaller,
    jlong runtime,
    jobject listener);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsLynxRuntime[] = {
    { "nativeCheckMemoryEnabled",
"("
")"
"Z", reinterpret_cast<void*>(CheckMemoryEnabled) },
    { "nativeCheckMemoryLeak",
"("
")"
"V", reinterpret_cast<void*>(CheckMemoryLeak) },
    { "nativeInitGlobalConfig",
"("
"I"
"I"
"D"
"I"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(InitGlobalConfig) },
    { "nativeCreateNativeJSRuntime",
"("
")"
"I", reinterpret_cast<void*>(CreateNativeJSRuntime) },
    { "nativeDestroyNativeJSRuntime",
"("
"J"
")"
"V", reinterpret_cast<void*>(DestroyNativeJSRuntime) },
    { "nativeRunScript",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/Object;"
")"
"V", reinterpret_cast<void*>(RunScript) },
    { "nativeLoadHTML",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(LoadHTML) },
    { "nativeLoadScriptDataWithBaseUrl",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(LoadScriptDataWithBaseUrl) },
    { "nativeLoadUrl",
"("
"J"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(LoadUrl) },
    { "nativeInitRuntime",
"("
"J"
")"
"Ljava/lang/Object;", reinterpret_cast<void*>(InitRuntime) },
    { "nativeGetPageURL",
"("
"J"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetPageURL) },
    { "nativeGetUserAgent",
"("
"J"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetUserAgent) },
    { "nativeSetUserAgent",
"("
"J"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SetUserAgent) },
    { "nativeAddJavascriptInterface",
"("
"J"
"Lcom/lynx/core/base/LynxFunctionObject;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(AddJavascriptInterface) },
    { "nativeSetExceptionListner",
"("
"J"
"Ljava/lang/Object;"
")"
"V", reinterpret_cast<void*>(SetExceptionListner) },
};

static bool RegisterNativesImpl(JNIEnv* env) {

  g_LynxRuntime_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kLynxRuntimeClassPath).Get()));

  const int kMethodsLynxRuntimeSize =
      sizeof(kMethodsLynxRuntime)/sizeof(kMethodsLynxRuntime[0]);

  if (env->RegisterNatives(LynxRuntime_clazz(env),
                           kMethodsLynxRuntime,
                           kMethodsLynxRuntimeSize) < 0) {
    //jni_generator::HandleRegistrationError(
    //    env, LynxRuntime_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // com_lynx_core_LynxRuntime_JNI
