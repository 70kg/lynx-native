
// This file is autogenerated by
//     /Users/dli/Documents/lynx/lynx-native/lynx/build/jni_generator.py
// For
//     com/lynx/ui/coordinator/CrdCommandExecutor

#ifndef com_lynx_ui_coordinator_CrdCommandExecutor_JNI
#define com_lynx_ui_coordinator_CrdCommandExecutor_JNI

#include <jni.h>

#include "base/android/android_jni.h"

// Step 1: forward declarations.
namespace {
const char kCrdCommandExecutorClassPath[] =
    "com/lynx/ui/coordinator/CrdCommandExecutor";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_CrdCommandExecutor_clazz = NULL;
#define CrdCommandExecutor_clazz(env) g_CrdCommandExecutor_clazz

}  // namespace

static jlong Prepare(JNIEnv* env, jclass jcaller,
    jstring executable);

static void Destroy(JNIEnv* env, jclass jcaller,
    jlong ptr);

static jobjectArray Execute(JNIEnv* env, jclass jcaller,
    jlong ptr,
    jstring method,
    jstring tag,
    jdoubleArray args);

static jboolean UpdateProperty(JNIEnv* env, jclass jcaller,
    jlong ptr,
    jstring property,
    jint type,
    jstring value1,
    jdouble value2,
    jboolean value3);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsCrdCommandExecutor[] = {
    { "nativePrepare",
"("
"Ljava/lang/String;"
")"
"J", reinterpret_cast<void*>(Prepare) },
    { "nativeDestroy",
"("
"J"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeExecute",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"[D"
")"
"[Ljava/lang/Object;", reinterpret_cast<void*>(Execute) },
    { "nativeUpdateProperty",
"("
"J"
"Ljava/lang/String;"
"I"
"Ljava/lang/String;"
"D"
"Z"
")"
"Z", reinterpret_cast<void*>(UpdateProperty) },
};

static bool RegisterNativesImpl(JNIEnv* env) {

  g_CrdCommandExecutor_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kCrdCommandExecutorClassPath).Get()));

  const int kMethodsCrdCommandExecutorSize =
      sizeof(kMethodsCrdCommandExecutor)/sizeof(kMethodsCrdCommandExecutor[0]);

  if (env->RegisterNatives(CrdCommandExecutor_clazz(env),
                           kMethodsCrdCommandExecutor,
                           kMethodsCrdCommandExecutorSize) < 0) {
    //jni_generator::HandleRegistrationError(
    //    env, CrdCommandExecutor_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // com_lynx_ui_coordinator_CrdCommandExecutor_JNI
