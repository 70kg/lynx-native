
// This file is autogenerated by
//     /Users/dli/Documents/lynx/lynx-native/lynx/build/jni_generator.py
// For
//     com/lynx/base/URLRequest

#ifndef com_lynx_base_URLRequest_JNI
#define com_lynx_base_URLRequest_JNI

#include <jni.h>

#include "base/android/android_jni.h"

// Step 1: forward declarations.
namespace {
const char kURLRequestClassPath[] = "com/lynx/base/URLRequest";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_URLRequest_clazz = NULL;
#define URLRequest_clazz(env) g_URLRequest_clazz

}  // namespace

static void OnSuccess(JNIEnv* env, jobject jcaller,
    jlong ptr,
    jstring url,
    jstring response);

static void OnFailed(JNIEnv* env, jobject jcaller,
    jlong ptr,
    jstring url,
    jstring error);

// Step 2: method stubs.

static intptr_t g_URLRequest_create = 0;
static base::android::ScopedLocalJavaRef<jobject> Java_URLRequest_create(JNIEnv*
    env, jstring url,
    jlong delegate) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, URLRequest_clazz(env),
  //    URLRequest_clazz(env), NULL);
  jmethodID method_id =
      base::android::GetMethod(
      env, URLRequest_clazz(env),
      base::android::STATIC_METHOD,
      "create",

"("
"Ljava/lang/String;"
"J"
")"
"Lcom/lynx/base/URLRequest;",
      &g_URLRequest_create);

  jobject ret =
      env->CallStaticObjectMethod(URLRequest_clazz(env),
          method_id, url, delegate);
  base::android::CheckException(env);
  return base::android::ScopedLocalJavaRef<jobject>(env, ret);
}

static intptr_t g_URLRequest_fetch = 0;
static void Java_URLRequest_fetch(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    URLRequest_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, URLRequest_clazz(env),
      base::android::INSTANCE_METHOD,
      "fetch",

"("
")"
"V",
      &g_URLRequest_fetch);

     env->CallVoidMethod(obj,
          method_id);
  base::android::CheckException(env);

}

static intptr_t g_URLRequest_cancel = 0;
static void Java_URLRequest_cancel(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  //CHECK_CLAZZ(env, obj,
  //    URLRequest_clazz(env));
  jmethodID method_id =
      base::android::GetMethod(
      env, URLRequest_clazz(env),
      base::android::INSTANCE_METHOD,
      "cancel",

"("
")"
"V",
      &g_URLRequest_cancel);

     env->CallVoidMethod(obj,
          method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsURLRequest[] = {
    { "nativeOnSuccess",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(OnSuccess) },
    { "nativeOnFailed",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(OnFailed) },
};

static bool RegisterNativesImpl(JNIEnv* env) {

  g_URLRequest_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kURLRequestClassPath).Get()));

  const int kMethodsURLRequestSize =
      sizeof(kMethodsURLRequest)/sizeof(kMethodsURLRequest[0]);

  if (env->RegisterNatives(URLRequest_clazz(env),
                           kMethodsURLRequest,
                           kMethodsURLRequestSize) < 0) {
    //jni_generator::HandleRegistrationError(
    //    env, URLRequest_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // com_lynx_base_URLRequest_JNI
