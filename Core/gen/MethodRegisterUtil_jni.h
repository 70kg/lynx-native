// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     /Users/dli/Documents/lynx/lynx-native/lynx/build/jni_generator.py
// For
//     com/lynx/utils/MethodRegisterUtil

#ifndef com_lynx_utils_MethodRegisterUtil_JNI
#define com_lynx_utils_MethodRegisterUtil_JNI

#include <jni.h>

//#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMethodRegisterUtilClassPath[] = "com/lynx/utils/MethodRegisterUtil";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_MethodRegisterUtil_clazz = NULL;
#define MethodRegisterUtil_clazz(env) g_MethodRegisterUtil_clazz

}  // namespace

static void RegisterJSMethod(JNIEnv* env, jclass jcaller,
    jint type,
    jstring methodName,
    jint methodId);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsMethodRegisterUtil[] = {
    { "nativeRegisterJSMethod",
"("
"I"
"Ljava/lang/String;"
"I"
")"
"V", reinterpret_cast<void*>(RegisterJSMethod) },
};

static bool RegisterNativesImpl(JNIEnv* env) {

  g_MethodRegisterUtil_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kMethodRegisterUtilClassPath).Get()));

  const int kMethodsMethodRegisterUtilSize =
      sizeof(kMethodsMethodRegisterUtil)/sizeof(kMethodsMethodRegisterUtil[0]);

  if (env->RegisterNatives(MethodRegisterUtil_clazz(env),
                           kMethodsMethodRegisterUtil,
                           kMethodsMethodRegisterUtilSize) < 0) {
    //jni_generator::HandleRegistrationError(
    //    env, MethodRegisterUtil_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // com_lynx_utils_MethodRegisterUtil_JNI
